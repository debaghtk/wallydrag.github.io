<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software design on Debashish Ghatak</title>
    <link>https://deba.dev/tags/software-design/</link>
    <description>Recent content in software design on Debashish Ghatak</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 07 Jul 2015 01:53:25 +0530</lastBuildDate>
    
	<atom:link href="https://deba.dev/tags/software-design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SOLID</title>
      <link>https://deba.dev/posts/solid/</link>
      <pubDate>Tue, 07 Jul 2015 01:53:25 +0530</pubDate>
      
      <guid>https://deba.dev/posts/solid/</guid>
      <description>Well Codeignition has added some new faces recently, and yeah I am one of them. I just passed out from IIT Jodhpur and got in here. And its been a huge learning experience since. Writing code is not the same now. Now I need to impose a great deal of thought on the structure of the code, and yes, SOLID has been a big help. So let&amp;rsquo;s get back to the basics and see what the fuss it is.</description>
    </item>
    
    <item>
      <title>Basic Principles of software design: Yagni</title>
      <link>https://deba.dev/posts/yagni/</link>
      <pubDate>Fri, 12 Jun 2015 01:53:00 +0530</pubDate>
      
      <guid>https://deba.dev/posts/yagni/</guid>
      <description>Welcome to third and final part of the series &amp;ldquo;Basic Principles of software design&amp;rdquo;. In this part, we will be knowing about YAGNI, yet another simple but realistic and powerful concept.
You aren&amp;rsquo;t gonna need it or YAGNI in short states that a new feature in a code should not be added, unless and untill it is absolutely necessary. It seriously discourages the practices of adding features that are not necessary at that present point of time, but the programmer thinks it might be useful in future.</description>
    </item>
    
    <item>
      <title>Basic principles of software design: Kiss</title>
      <link>https://deba.dev/posts/kiss/</link>
      <pubDate>Mon, 08 Jun 2015 01:52:55 +0530</pubDate>
      
      <guid>https://deba.dev/posts/kiss/</guid>
      <description>This is the second post in the series of &amp;ldquo;Basic principles of software design&amp;rdquo;. In part 1, we discussed about DRY. Today, we will be knowing about KISS. Yes, you read it right.
KISS is acronym for &amp;lsquo;Keep it simple stupid&amp;rsquo;. This principle, as simple as it sounds, is not easy to implement. I personally find it correct in so many aspects of life, for me KISS is very philosophical.</description>
    </item>
    
    <item>
      <title>Basic principles of software design: Dry</title>
      <link>https://deba.dev/posts/dry/</link>
      <pubDate>Thu, 04 Jun 2015 01:50:29 +0530</pubDate>
      
      <guid>https://deba.dev/posts/dry/</guid>
      <description>I am thinking of doing a series of blog posts this time, that underlines the importance of some of the very basic principles of software development. I personally felt that a programmer should be introduced to these principles as early as possible. These fundamentals may seem easy on the eye, but it takes a while to implement them in your code.
Imagine a situation. Suppose you have a dog at your house, that needs milk every morning.</description>
    </item>
    
  </channel>
</rss>